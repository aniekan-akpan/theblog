---
import MainLayout from "../../layouts/MainLayout.astro";
import siteConfig from "../../site.config";
import { getAllPodcasts, getPodcastBySlug, type Podcast } from "../../utils/strapi";
import AudioPlayer from "../../components/AudioPlayer.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import Button from "../../components/Button.astro";
import ArrowLeft from "../../icons/ArrowLeft.astro";
import { withBase } from "../../utils/helpers";

export async function getStaticPaths() {
  const podcasts = await getAllPodcasts();
  return podcasts.map((podcast) => ({
    params: { slug: podcast.slug },
    props: { podcast },
  }));
}

type Props = {
  podcast: Podcast;
};

const { podcast } = Astro.props;
const { title, description, pubDate, coverImage, author, tags = [], transcript, episodeNumber, season } = podcast;
---

<MainLayout pageTitle={siteConfig.title + " | " + title}>
  <div class="page-content podcast-detail">
    <Button href={withBase("/podcasts")} class="back-button space-btn-outlined">
      <ArrowLeft class="w-4 h-4 fill-current mr-2" />
      Back to Podcasts
    </Button>

    <div class="podcast-header">
      {coverImage && coverImage.url && (
        <div class="podcast-cover">
          <img src={coverImage.url} alt={coverImage.alt || title} />
        </div>
      )}
      
      <div class="podcast-info">
        <div class="podcast-meta">
          {episodeNumber && season && (
            <span class="episode-badge">Season {season} • Episode {episodeNumber}</span>
          )}
          {episodeNumber && !season && (
            <span class="episode-badge">Episode {episodeNumber}</span>
          )}
        </div>
        
        <h1 class="sigmar-ff podcast-title">{title}</h1>
        
        <div class="podcast-details kanit-light">
          <span>By {author || "Aniekan Akpan"}</span>
          <span class="separator">•</span>
          <FormattedDate date={pubDate} />
        </div>
        
        <p class="podcast-description kanit-regular">{description}</p>
        
        {tags && tags.length > 0 && (
          <div class="tags">
            {tags.map((tag) => (
              <span class="tag">#{tag}</span>
            ))}
          </div>
        )}
      </div>
    </div>

    <AudioPlayer podcast={podcast} />

    {transcript && (
      <div class="transcript-section">
        <h2 class="sigmar-ff">Transcript</h2>
        <div class="transcript-content kanit-light" set:html={transcript} />
      </div>
    )}
  </div>
</MainLayout>

<style>
  .podcast-detail {
    max-width: 50rem;
  }

  .back-button {
    margin-bottom: 2rem;
  }

  .podcast-header {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  @media (min-width: 768px) {
    .podcast-header {
      grid-template-columns: 300px 1fr;
    }
  }

  .podcast-cover {
    width: 100%;
    max-width: 300px;
    margin: 0 auto;
  }

  .podcast-cover img {
    width: 100%;
    height: auto;
    border-radius: 1rem;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  }

  .podcast-info {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .podcast-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .episode-badge {
    background: rgba(144, 57, 58, 0.2);
    color: var(--color-space-red);
    padding: 0.25rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-family: 'Kanit', sans-serif;
    font-weight: 500;
  }

  :global(.dark) .episode-badge {
    background: rgba(255, 255, 133, 0.2);
    color: var(--color-space-yellow);
  }

  .podcast-title {
    font-size: 2rem;
    line-height: 1.2;
    margin: 0;
  }

  @media (max-width: 640px) {
    .podcast-title {
      font-size: 1.5rem;
    }
  }

  .podcast-details {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    opacity: 0.7;
  }

  .separator {
    opacity: 0.5;
  }

  .podcast-description {
    font-size: 1.125rem;
    line-height: 1.7;
    margin: 0;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: rgba(0, 0, 0, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-family: 'Kanit', sans-serif;
    font-weight: 300;
  }

  :global(.dark) .tag {
    background: rgba(255, 255, 255, 0.1);
  }

  .transcript-section {
    margin-top: 3rem;
    padding-top: 3rem;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .transcript-section {
    border-top-color: rgba(255, 255, 255, 0.1);
  }

  .transcript-section h2 {
    margin-bottom: 1.5rem;
  }

  .transcript-content {
    font-size: 1rem;
    line-height: 1.8;
    opacity: 0.8;
  }

  .transcript-content :global(p) {
    margin-bottom: 1rem;
  }
</style>
